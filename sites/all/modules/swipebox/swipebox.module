<?php
/**
 * The default path to the Swipebox directory..
 */
define('SWIPEBOX_PATH', 'sites/all/libraries/swipebox');


/**
 * Implements hook_theme().
 */
function swipebox_theme() {
  return array(
    'swipebox_image_formatter' => array(
      'variables' => array(
        'item' => NULL,
        'entity' => NULL,
        'entity_type' => NULL,
        'field' => array(),
        'display_settings' => array(),
      ),
      'file' => 'swipebox.theme.inc',
    ),
    'swipebox_imagefield' => array(
      'variables' => array(
        'image' => array(),
        'path' => NULL,
        'caption' => NULL,
        'group' => NULL,
      ),
      'file' => 'swipebox.theme.inc',
    ),
    'swipebox_insert_image' => array(
      'variables' => array(
        'item' => NULL,
        'widget' => NULL,
      ),
      'template' => 'swipebox-insert-image',
      'file' => 'swipebox.theme.inc',
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function swipebox_field_formatter_info() {
  return array(
    'swipebox' => array(
      'label' => t('Swipebox'),
      'field types' => array('image'),
      'settings' => array(
        'swipebox_image_style_content' => 'thumbnail',
        'swipebox_image_style_swipebox' => 'large',
        'swipebox_gallery' => 'post',
        'swipebox_gallery_custom' => '',
        'swipebox_caption' => 'auto',
        'swipebox_caption_custom' => '',
      ),
    ),
  );
}


/**
 * Implements hook_field_formatter_settings_form().
 */
function swipebox_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $image_style_options = image_style_options(FALSE);

  $element['swipebox_image_style_content'] = array(
    '#type' => 'select',
    '#title' => t('Content image style'),
    '#description' => t('The image in the content will be displayed using this image style.'),
    '#options' => $image_style_options,
    '#empty_option' => t('None (original image)'),
    '#default_value' => $settings['swipebox_image_style_content'],
  );

  $element['swipebox_image_style_swipebox'] = array(
    '#type' => 'select',
    '#title' => t('swipebox image style'),
    '#description' => t('The image shown in the swipebox will be displayed using this image style.'),
    '#options' => $image_style_options,
    '#empty_option' => t('None (original image)'),
    '#default_value' => $settings['swipebox_image_style_swipebox'],
  );

  $element['swipebox_gallery'] = array(
    '#type' => 'select',
    '#title' => t('Gallery (image grouping)'),
    '#description' => t('Group images using this scheme. The <em>data-swipebox-group</em> HTML attribute will be used.'),
    '#options' => swipebox_field_formatter_grouping_options(),
    '#default_value' => $settings['swipebox_gallery'],
  );

  $element['swipebox_gallery_custom'] = array(
    '#type' => 'textfield',
    '#title' => t('Custom grouping'),
    '#description' => t('Every image on the page with this grouping value will be grouped together.<br />The <em>data-swipebox-group</em> HTML attribute will be used.<br /><strong>Note</strong>: Must only contain letters, numbers, hyphens and underscores and it must begin with a letter.'),
    '#element_validate' => array('swipebox_gallery_custom_validate'),
    '#default_value' => $settings['swipebox_gallery_custom'],
    '#states' => array(
      'visible' => array(
        ':input[name$="[settings_edit_form][settings][swipebox_gallery]"]' => array('value' => 'custom'),
      ),
    ),
  );

  $element['swipebox_caption'] = array(
    '#type' => 'select',
    '#title' => t('Caption'),
    '#options' => swipebox_field_formatter_caption_options(),
    '#default_value' => $settings['swipebox_caption'],
  );

  $element['swipebox_caption_custom'] = array(
    '#type' => 'textfield',
    '#title' => t('Custom caption'),
    '#default_value' => $settings['swipebox_caption_custom'],
    '#states' => array(
      'visible' => array(
        ':input[name$="[settings_edit_form][settings][swipebox_caption]"]' => array('value' => 'custom'),
      ),
    ),
  );

  return $element;
}



/**
 * Implements hook_field_formatter_settings_summary().
 */
function swipebox_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $image_style_options = image_style_options();
  $grouping_options = swipebox_field_formatter_grouping_options();
  $caption_options = swipebox_field_formatter_caption_options();

  $summary = t('Content image style: %style', array('%style' => isset($image_style_options[$settings['swipebox_image_style_content']]) ? $image_style_options[$settings['swipebox_image_style_content']] : t('Original image'))) . '<br />';

  $summary .= t('swipebox image style: %style', array('%style' => isset($image_style_options[$settings['swipebox_image_style_swipebox']]) ? $image_style_options[$settings['swipebox_image_style_swipebox']] : t('Original image'))) . '<br />';

  $summary .= t('Grouping options: %option', array('%option' => $settings['swipebox_gallery'] != 'none' ? $grouping_options[$settings['swipebox_gallery']] : t('None'))) . '<br />';

  $summary .= t('Caption: %option', array('%option' => $settings['swipebox_caption'] != 'none' ? $caption_options[$settings['swipebox_caption']] : t('None')));

  return $summary;
}


/**
 * Return an array of available grouping options.
 */
function swipebox_field_formatter_grouping_options() {
  return array(
    'none' => t('<none>'),
    'post' => t('Per post gallery'),
    'page' => t('Per page gallery'),
    'field_post' => t('Per field in post gallery'),
    'field_page' => t('Per field in page gallery'),
    'custom' => t('Custom'),
  );
}


/**
 * Return an array of available caption options.
 */
function swipebox_field_formatter_caption_options() {
  return array(
    'none' => t('<none>'),
    'auto' => t('Automatic'),
    'title' => t('Title text'),
    'alt' => t('Alt text'),
    'content_title' => t('Content title'),
    'custom' => t('Custom'),
  );
}


/**
 * Custom element validator for the custom grouping value.
 *
 * @see swipebox_field_formatter_settings_form().
 */
function swipebox_gallery_custom_validate($element, &$form_state, $form) {
  $field_name = $element['#array_parents'][1];

  if ($form_state['values']['fields'][$field_name]['settings_edit_form']['settings']['swipebox_gallery'] == 'custom' && !preg_match('/^[A-Za-z]+[A-Za-z0-9-_]*$/', $element['#value'])) {
    form_error($element, t('The custom grouping value must only contain letters, numbers, hyphens and underscores and it must begin with a letter.'));
  }
}

/**
 * Implements hook_insert_styles().
 */
function swipebox_insert_styles() {
  $insert_styles = array();

  foreach (image_styles() as $key => $style) {
    $insert_styles['swipebox__' . $key] = array('label' => $style['name'] . ' (swipebox)');
  }

  return $insert_styles;
}

/**
 * Implements hook_insert_content().
 */
function swipebox_insert_content($item, $style, $widget) {
  list($item['module_name'], $item['style_name']) = explode('__', $style['name'], 2);

  return theme('swipebox_insert_image', array(
    'item' => $item,
    'widget' => $widget,
  ));
}


/**
 * Default settings for swipebox.
 *
 * @return array
 *   An array of defaults.
 */
function _swipebox_defaults() {
  return array(
    // Module settings
    'settings' => array(
      'selectors' => '',
      'deactivated_pages' => "admin*\nimg_assist*\nimce*\nnode/add*\nnode/*/edit",
    ),
    // Options that are plugged directly into the swipebox javascript.
    'options' => array(
      'padding' => 15,
      'margin' => 20,
      'width' => 800,
      'height' => 600,
      'minWidth' => 100,
      'minHeight' => 100,
      'maxWidth' => 9999,
      'maxHeight' => 9999,
      'autoSize' => 1,
      'autoHeight' => 0,
      'autoWidth' => 0,
      'autoResize' => 1,
      'autoCenter' => 1,
      'fitToView' => 1,
      'aspectRatio' => 0,
      'topRatio' => 0.5,
      'leftRatio' => 0.5,
      'scrolling' => 'auto',
      'wrapCSS' => '',
      'arrows' => 1,
      'closeBtn' => 1,
      'closeClick' => 0,
      'nextClick' => 0,
      'mouseWheel' => 1,
      'autoPlay' => 0,
      'playSpeed' => 3000,
      'preload' => 3,
      'modal' => 0,
      'openEffect' => 'fade',
      'closeEffect' => 'fade',
      'nextEffect' => 'elastic',
      'prevEffect' => 'elastic',
      'openSpeed' => 250,
      'closeSpeed' => 250,
      'nextSpeed' => 250,
      'prevSpeed' => 250,
      'openEasing' => 'swing',
      'closeEasing' => 'swing',
      'nextEasing' => 'swing',
      'prevEasing' => 'swing',
      'openOpacity' => 1,
      'closeOpacity' => 1,
      'openMethod' => 'zoomIn',
      'closeMethod' => 'zoomOut',
      'nextMethod' => 'changeIn',
      'prevMethod' => 'changeOut',
    ),
    // Options for helpers. (Helpers are disabled by default).
    'helpers' => array(
      'title_enabled' => 1,
      'overlay_enabled' => 1,
      'thumbs_enabled' => 0,
      'media_enabled' => 0,
      'buttons_enabled' => 0,
      'title' => array(
        'type' => 'float',
        'position' => 'bottom',
      ),
      'overlay' => array(
        'closeClick' => 1,
        'speedOut' => 200,
        'showEarly' => 1,
        'locked' => 1,
        'fixed' => 1,
      ),
      'thumbs' => array(
        'width' => 50,
        'height' => 50,
        'position' => 'bottom',
      ),
      'media' => array(),
      'buttons' => array(
        'position' => 'top',
      ),
    ),
    // Allow the user to specify callback methods.
    'callbacks' => array(
      'onCancel' => '',
      'beforeLoad' => '',
      'afterLoad' => '',
      'beforeShow' => '',
      'afterShow' => '',
      'beforeClose' => '',
      'afterClose' => '',
      'onUpdate' => '',
      'onPlayStart' => '',
      'onPlayEnd' => '',
    ),
  );
}


/**
 * Implements hook_field_formatter_view().
 */
function swipebox_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  foreach ($items as $i => $item) {
    $element[$i] = array(
      '#theme' => 'swipebox_image_formatter',
      '#item' => $item,
      '#entity' => $entity,
      '#entity_type' => $entity_type,
      '#field' => $field,
      '#display_settings' => $display['settings'],
    );
  }

  return $element;
}
