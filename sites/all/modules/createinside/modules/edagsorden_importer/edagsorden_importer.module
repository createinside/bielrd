<?php

/**
 * Implementation of hook_menu().
 */
function edagsorden_importer_menu() {
	$items = array();
	$items['admin/config/services/agenda-importer'] = array(
	  'title' => 'Agenda Importer',
	  'description' => t('Configure general settings and do manual imports.'),
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('edagsorden_importer_form'),
	  'access arguments' => array('administer edagsorden importer'),
	);
	$items['edagsorden/sync'] = array(
    'page callback' => 'edagsorden_importer_sync',
    'access arguments' => array('administer edagsorden importer'),
    'type' => MENU_CALLBACK,
	);
	$items['sbsys/sync'] = array(
    'page callback' => 'edagsorden_importer_sbsys_sync',
    'access arguments' => array('administer edagsorden importer'),
    'type' => MENU_CALLBACK,
	);
	return $items;
}

/**
 * Implements hook_permission().
 */
function edagsorden_importer_permission() {
  return array(
    'administer edagsorden importer' => array(
      'title' => t('Administer edagsorden importer'),
      'description' => t('Administer Edagsorden Importer'),
    ),
  );
}

/**
 * Settings Form
 *
 * Implementation of hook_form().
 */
function edagsorden_importer_form($form, &$form_state) {

  $form['sbsys'] = array(
    '#type' => 'fieldset',
    '#title' => "SBSYS",
  ); 
  $form['sbsys']['sbsys_root_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Root Path'),
    '#description' => "Indtast en intern server sti til roden af SBSYS dagsordenerne.",
    '#default_value' => variable_get('sbsys_root_path', '')
  );
  $form['sbsys']['sbsys_root_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Root URL'),
    '#description' => "Indtast URL'en til roden af bilagsserveren.",
    '#default_value' => variable_get('sbsys_root_url', '')
  );
  $form['sbsys']['markup'] = array(
    '#markup' => "<p>".l(t('Import'), 'sbsys/sync', array('attributes' => array('class' => array('button'))))."</p>",
  );
  $form['edagsorden'] = array(
    '#type' => 'fieldset',
    '#title' => "eDagsorden",
  );  
  $form['edagsorden']['edagsorden_root_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Root URL'),
    '#description' => "Indtast URL'en til roden af eDagsorden Publicerings Service pÃ¥ windows serveren.",
    '#default_value' => variable_get('edagsorden_root_url', '')
  );
  $form['edagsorden']['markup'] = array(
    '#markup' => "<p>".l(t('Import'), 'edagsorden/sync', array('attributes' => array('class' => array('button'))))."</p>",
  );
  return system_settings_form($form);
}

/**
 * Feeds Tamper Plugin
 *
 * hook_ctools_plugin_directory
 */
function edagsorden_importer_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'feeds_tamper' && $plugin_type == 'plugins') {
    return 'custom_plugins/';
  }
}

/**
 * Implementation of hook_cron().
 */
function edagsorden_importer_cron() {

	edagsorden_importer_agenda_import_sbsys();
  watchdog('edagsorden_importer', t("Agendas have been imported from SBSYS on cron"));
  
	// Feeds Log
  if ($importers = feeds_reschedule()) {
    foreach ($importers as $id) {
      feeds_importer($id)->schedule();
      $rows = db_query("SELECT feed_nid FROM {feeds_source} WHERE id = :id", array(':id' => $id));
      foreach ($rows as $row) {
        feeds_source($id, $row->feed_nid)->schedule();
      }
    }
    feeds_reschedule(FALSE);
  }
  // Expire old log entries.
  db_delete('feeds_log')
    ->condition('request_time', REQUEST_TIME - 86400, '<')
    ->execute();
}

/**
 * Manual Import - eDagsorden
 * 
 * Link callback to trigger manual import
 */
function edagsorden_importer_sync() {
	
	edagsorden_importer_agenda_import_edagsorden();
	
  watchdog('edagsorden_importer', t("Agendas have been imported manually from eDagsorden"));
  drupal_set_message(t("The manual import from eDagsorden has been triggered"));
  drupal_goto("admin/config/services/agenda-importer");
}

/**
 * Manual Import - SBSYS
 * 
 * Link callback to trigger manual import
 */
function edagsorden_importer_sbsys_sync() {
	
	edagsorden_importer_agenda_import_sbsys();
	
  watchdog('edagsorden_importer', t("Agendas have been imported manually from SBSYS"));
  drupal_set_message(t("The manual import from SBSYS has been triggered"));
  drupal_goto("admin/config/services/agenda-importer");
}

/**
 * Import Committees
 *
 * Create/update committee taxonomy terms
 */
function edagsorden_importer_agenda_import_sbsys() {
	
	/**
	 * Initiate feeds committee importer
	 */
	 
	/* Start admin state */
  global $user;
  $original_user = $user;
  $old_state = drupal_save_session(FALSE);
  $user = user_load(1);
    
	$committee_source = variable_get('sbsys_root_path', '');
	$agenda_ids = array();
	
	// Find all XML files recursively
	$dir = new RecursiveDirectoryIterator($committee_source);
	$ite = new RecursiveIteratorIterator($dir);
  $files = new RegexIterator($ite, "/\.xml$/", RegexIterator::MATCH);
  
 	foreach($files as $file) {
		
		$agenda_source = $file->getPathname();

		// Extract agenda id from file path
		$start_pos = strpos($agenda_source, "(ID");
		$agenda_id = substr($agenda_source, $start_pos+3);
  	$end_pos = strpos($agenda_id, "/");
  	$agenda_id = str_replace(")/dagsorden.xml", "", $agenda_id);
  	  	
  	/**
		 *	Initiate feeds agenda importer	
		 */
		$importer_id = 'sbsys_agenda_importer';
		$feedSource = feeds_source($importer_id, $agenda_id);
		$config = $feedSource->getConfig();
		$config['FeedsFileFetcher']['source'] = $agenda_source;	

		$feedSource->setConfig($config);
		$feedSource->save();
		$feedSource->import();
		
		/**
		 *	Initiate feeds item importer 	
		 */
		$importer_id = 'sbsys_item_importer';
		$feedSource = feeds_source($importer_id, $agenda_id);
		$config = $feedSource->getConfig();
		$config['FeedsFileFetcher']['source'] = $agenda_source;
				
		$feedSource->setConfig($config);
		$feedSource->save();
		$feedSource->import();
		
		// Save Agenda Ids
		$agenda_ids[] = $agenda_id;
	}
	
	/* Delete expired agendas */
	if(!empty($agenda_ids)) {
		$query = new EntityFieldQuery();
		$query
		  ->entityCondition('entity_type', 'node')
		  ->entityCondition('bundle', 'agenda')
		  ->fieldCondition('field_agenda_source', 'value', 'sbsys')
		  ->fieldCondition('field_agenda_id', 'value', $agenda_ids, 'NOT IN');
		$result = $query->execute();
		
		if (isset($result['node'])) {
			$nids = array_keys($result['node']);
			node_delete_multiple($nids);
			watchdog("edagsorden_importer", "Deleted ".count($nids)." expired agendas from SBSYS");
		}
	}	
	/* End admin state */
	$user = $original_user;
  drupal_save_session($old_state);		
}

/**
 * Import Committees
 *
 * Create/update committee taxonomy terms
 */
function edagsorden_importer_agenda_import_edagsorden() {
	
	/**
	 * Initiate feeds committee importer
	 */
	 
	/* Start admin state */
  global $user;
  $original_user = $user;
  $old_state = drupal_save_session(FALSE);
  $user = user_load(1);
    
	$committee_source = variable_get('edagsorden_root_url', '')."/committees.xml"; 
	$agenda_ids = array();
								
	$importer_id = 'edagsorden_committee_importer';
	$feedSource = feeds_source($importer_id);
	$config = $feedSource->getConfig();
	$config['FeedsHTTPFetcher']['source'] = $committee_source;
		
	$feedSource->setConfig($config);
	$feedSource->save();
	$feedSource->import();
	
	/* Load Committees */
	$xml_file = simplexml_load_file($committee_source);
	$committees = $xml_file->xpath('//Committee');
		
	foreach($committees as $committee) {
		
		$com_id 	= (integer)$committee->Id;
		$com_name = (string)$committee->Name;

		$agendas = $committee->xpath("Agendas/Agenda[DagsordenRodId!=0]");
		
		foreach($agendas as $agenda) {

			/**
			 *	Initiate feeds agenda importer	
			 */
			$agenda_id = (integer)$agenda->Id;
			$root_id = (integer)$agenda->DagsordenRodId;

			$agenda_source = variable_get('edagsorden_root_url', '')."/committee_".$com_id."/agenda_".$root_id."/agenda_".$root_id.".xml";
			
			$importer_id = 'edagsorden_agenda_importer';
			$feedSource = feeds_source($importer_id, $agenda_id);
			$config = $feedSource->getConfig();
			$config['FeedsHTTPFetcher']['source'] = $agenda_source;	
					
			$feedSource->setConfig($config);
			$feedSource->save();
			$feedSource->import();
						
			/**
			 *	Initiate feeds item importer 	
			 */
			$importer_id = 'edagsorden_item_importer';
			$feedSource = feeds_source($importer_id, $agenda_id);
			$config = $feedSource->getConfig();
			$config['FeedsHTTPFetcher']['source'] = $agenda_source;	
					
			$feedSource->setConfig($config);
			$feedSource->save();
			$feedSource->import();
			
			// Save Agenda Ids
			$agenda_ids[] = $agenda_id;
		}
	}
	
	/* Delete expired agendas */
	if(!empty($agenda_ids)) {
		$query = new EntityFieldQuery();
		$query
		  ->entityCondition('entity_type', 'node')
		  ->entityCondition('bundle', 'agenda')
		  ->fieldCondition('field_agenda_source', 'value', 'edagsorden')
		  ->fieldCondition('field_agenda_id', 'value', $agenda_ids, 'NOT IN');
		$result = $query->execute();
		
		if (isset($result['node'])) {
			$nids = array_keys($result['node']);
			node_delete_multiple($nids);
			watchdog("edagsorden_importer", "Deleted ".count($nids)." expired agendas from eDagsorden");
		}
	}
	
	/* End admin state */
	$user = $original_user;
  drupal_save_session($old_state);		
}

/**
 * Includes
 */
module_load_include('inc', 'edagsorden_importer', 'edagsorden_importer.filter');