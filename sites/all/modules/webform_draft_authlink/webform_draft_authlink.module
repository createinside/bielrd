<?php

/**
 * @file
 * Main module file.
 */

/**
 * Implements hook_menu().
 */
function webform_draft_authlink_menu() {
  $items = array();

  // Node page tabs.
  $items['node/%webform_menu/webform-draft-authlink'] = array(
    'title' => 'Webform draft',
    'page callback' => 'webform_draft_authlink_webform_draft_confirmation_page',
    'page arguments' => array(1),
    'access callback' => 'webform_draft_authlink_webform_draft_confirmation_page_access',
    'access arguments' => array(1),
    'file' => 'includes/webform_draft_authlink.pages.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Access function for confirmation draft submission page.
 *
 * @param $node
 *   The webform node object.
 *
 * @return
 *  Boolean whether the user has access to the confirmation page.
 */
function webform_draft_authlink_webform_draft_confirmation_page_access($node) {
  global $user;
  $qp = drupal_get_query_parameters();

  // Make sure SID is a positive integer.
  $sid = (!empty($qp['sid']) && (int) $qp['sid'] > 0) ? (int) $qp['sid'] : NULL;

  if ($sid) {
    module_load_include('inc', 'webform', 'includes/webform.submissions');
    $submission = webform_get_submission($node->nid, $sid);
  }
  else {
    $submission = NULL;
  }

  if ($submission) {
    
    // Logged-in users.
    if ($user->uid) {
      // User's own submission.
      if ($submission->uid === $user->uid && node_access('view', $node)) {
        return TRUE;
      }
      // User has results access to this submission.
      elseif (webform_submission_access($node, $submission)) {
        return TRUE;
      }
    }
    // Anonymous user for their own submission. Authkey of submission data must
    // match the hash in the query string.
    elseif ((int) $user->uid === 0 && (int) $submission->uid === 0) {
      
      $authlink = !empty($qp['webform_draft_authlink']) ? $qp['webform_draft_authlink'] : NULL;
      if ($authlink === $submission->draft_authlink) {
        return TRUE;
      }
    }
  }

  return FALSE;
}

/**
 * Send webform draft authlink.
 * 
 * @param type $submission
 * @param type $mail
 * @param type $language
 * @return type
 */
function webform_draft_authlink_webform_draft_user_mail_notify($webform, $submission, $mail, $language = NULL) {
  // Params:
  $params['webform'] = $webform;
  $params['submission'] = $submission;

  // Send mail:
  $message = drupal_mail('webform_draft_authlink', 'draft_authlink', $mail, $language, $params);

  return empty($message) ? NULL : $message['result'];
}

/**
 * Implements hook_mail().
 */
function webform_draft_authlink_mail($key, &$message, $params) {
  $language = $message['language'];
  $variables = $params;
  $message['subject'] .= webform_draft_authlink_mail_text($key . '_subject', $language, $variables);
  $message['body'][] = webform_draft_authlink_mail_text($key . '_body', $language, $variables);
}

/**
 * Returns a mail string for a variable name.
 *
 * Used by user_mail() and the settings forms to retrieve strings.
 */
function webform_draft_authlink_mail_text($key, $language = NULL, $variables = array(), $replace = TRUE) {
  $langcode = isset($language) ? $language->language : NULL;

  if ($admin_setting = variable_get('webform_draft_authlink_mail_' . $key, FALSE)) {
    // An admin setting overrides the default string.
    $text = $admin_setting;
  }
  else {
    // No override, return default string.
    switch ($key) {
      case 'draft_authlink_subject':
        $text = t('Draft submission details for [webform:title] at [site:name]', array(), array('langcode' => $langcode));
        break;
      case 'draft_authlink_body':
        $text = t("You may now continue your form submission by clicking this link or copying and pasting it to your browser:

[submission:draft-authlink-url]

This link can be used anytime while the submission is still a draft.

--  [site:name] team", array(), array('langcode' => $langcode));
        break;

    }
  }

  if ($replace) {
    // We do not sanitize the token replacement, since the output of this
    // replacement is intended for an e-mail message, not a web browser.
    return token_replace($text, $variables, array('language' => $language, 'callback' => 'webform_draft_authlink_mail_tokens', 'sanitize' => FALSE, 'clear' => TRUE));
  }

  return $text;
}

/**
 * Token callback to add unsafe tokens for user mails.
 *
 * This function is used by the token_replace() call at the end of
 * webform_draft_authlink_mail_text() to set up some additional tokens that can be
 * used in email messages generated by user_mail().
 *
 * @param $replacements
 *   An associative array variable containing mappings from token names to
 *   values (for use with strtr()).
 * @param $data
 *   An associative array of token replacement values.
 *   The 'webform' element properties:
 *   - nid: The node nide.
 *   - title: The node title.
 *   The 'submission' element properties:
 *   - draft_authlink: The submission draft_authlink.
 * @param $options
 *   Unused parameter required by the token_replace() function.
 */
function webform_draft_authlink_mail_tokens(&$replacements, $data, $options) {

  if (isset($data['webform'])) {
    $replacements['[webform:title]'] = $data['webform']->title;
  }
  
  if (isset($data['webform']) && isset($data['submission'])) {
    $replacements['[submission:draft-authlink-url]'] = webform_draft_authlink_mail_submission_url($data['webform'], $data['submission']);
  }
}

/**
 * Returns draft submission url.
 */
function webform_draft_authlink_mail_submission_url($webform, $submission) {
  $path = 'node/' . $webform->nid;
  $options = array(
    'query' => array(
      'webform_draft_authlink' => $submission->draft_authlink,
    ),
    'absolute' => TRUE,
  );
  return url($path, $options);
}

/**
 * Implements hook_form_alter().
 */
function webform_draft_authlink_form_alter(&$form, &$form_state, $form_id) {

  if (strpos($form_id,'webform_client_form_') !== FALSE)  {

    $node = $form['#node'];

    if ($node->webform['allow_draft_authlink'] && user_is_anonymous()) {

      // @NOTE: this code is copied from webform module, ideally this element
      // should be always created and only access should be modified.
      // A patch will be provided for that.

      // Add the draft button.
      $buttons_pre_render = array_merge(element_info_property('submit', '#pre_render', array()), array('webform_pre_render_remove_id'));

      if (!isset($form['actions']['draft'])) {
        $form['actions']['draft'] = array(
          '#type' => 'submit',
          '#value' => t('Save Draft'),
          '#weight' => -2,
          '#validate' => array('webform_client_form_prevalidate'), // Prevalidation only; no element validation for Save Draft
          '#attributes' => array(
            'formnovalidate' => 'formnovalidate',
            'class' => array('webform-draft'),
          ),
          '#pre_render' => $buttons_pre_render,
        );
      }
      else {
        $form['actions']['draft']['#access'] = TRUE;
      }

      $form['#submit'][] = 'webform_draft_authlink_webform_client_form_submit';
    }
  }

}

/**
 * Submit callback: webform_client_form_N
 */
function webform_draft_authlink_webform_client_form_submit(&$form, &$form_state) {

  // Only apply on save draft op:
  if (empty($form_state['save_draft'])) {
    return;
  }

  // Redirect to draft page:
  $sid = $form_state['values']['details']['sid'];
  $nid = $form_state['values']['details']['nid'];

  $subission = webform_get_submission($nid, $sid);

  $path = 'node/' . $nid . '/webform-draft-authlink';
  $options = array(
    'query' => array(
      'sid' => $sid,
      'webform_draft_authlink' => $subission->draft_authlink,
    ),
  );
  $form_state['redirect'] = array(
    $path,
    $options,
  );
  
  $form_state['rebuild'] = FALSE;

}

/**
 * Implements hook_form_ID_alter().
 */
function webform_draft_authlink_form_webform_configure_form_alter(&$form, &$form_state) {
  $node = $form['#node'];
  
  $form['advanced']['allow_draft_authlink'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow "Save draft" authlink'),
    '#default_value' => $node->webform['allow_draft_authlink'],
    '#description' => t('Allow your users to save and finish the form later with an authlink code. This option is available only for anonymous users.'),
    '#states' => array(
      'visible' => array(
       ':input[name="allow_draft"]' => array('checked' => TRUE),
      ),
    ),
  );

  // Promote own node properties:
  array_unshift($form['#submit'], 'webform_draft_authlink_form_webform_configure_form_submit');

}

/**
 * Submit: webform_draft_authlink_form_webform_configure_form.
 */
function webform_draft_authlink_form_webform_configure_form_submit(&$form, &$form_state) {
  // @see webform_configure_form_submit_save().
  $node = &$form['#node'];

  // Set the draft authlink option.
  $node->webform['allow_draft_authlink'] = $form_state['values']['allow_draft_authlink'];
}

/**
 * Implements hook_webform_draft_alter().
 */
function webform_draft_authlink_webform_draft_alter(&$sid, $context) {
  // Override SID by authlink
  $qp = drupal_get_query_parameters();
  $draft_authlink = !empty($qp['webform_draft_authlink']) ? trim($qp['webform_draft_authlink']) : NULL;
  if (!empty($draft_authlink)) {
    $sid = webform_draft_authlink_webform_submissions($context['nid'], $context['uid'], $draft_authlink);
  }
}

/**
 * Get webform submissions SID by authlink.
 *
 * @param type $nid
 *
 * @param type $uid
 *
 * @param type $draft_authlink
 *
 * @return int
 *   webform submissions SID
 */
function webform_draft_authlink_webform_submissions($nid, $uid, $draft_authlink) {
  $sid = db_select('webform_submissions')
    ->fields('webform_submissions', array('sid'))
    ->condition('nid', $nid)
    ->condition('uid', $uid)
    ->condition('is_draft', 1)
    ->condition('draft_authlink', $draft_authlink)
    ->orderBy('submitted', 'DESC')
    ->execute()
    ->fetchField();

  return $sid;
}

/**
 * Modify a Webform submission, prior to saving it in the database.
 *
 * @param $node
 *   The Webform node on which this submission was made.
 * @param $submission
 *   The Webform submission that is about to be saved to the database.
 */
function webform_draft_authlink_webform_submission_presave($node, $submission) {

  // Generate an authlink
  if (!empty($node->webform['allow_draft_authlink'])
    && !empty($submission->is_draft)
    && empty($submission->draft_authlink)) {
    // @TODO: check authlink is unique! No just trush in probability.
    // @TODO: get code length from webform config!
    $length = 128;
    $submission->draft_authlink = user_password($length);
  }

}
